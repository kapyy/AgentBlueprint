syntax = "proto3";
package protoData;
option go_package = "golang-client/message";


message NodeConnector{
  map<int32,NodeData> input_nodes = 1;
}

message NodeData{
  //Python should handle only function nodes
  //so all data nodes need to be handled by the game server
  //process data are concat in the node prompts

  uint64 node_id = 1;

  //Function NodeData Contains byte form of ServiceFunction
  //NodeData Are Only used:
  //Game Server --> mutate prompts
  //                Add Raw data which does not need to be processed into input_data_obj
  //Python --> unpack all node data to utilize LLM
  //Data NodeData Holds dataInformation which Game Server Does not have
  //eg. predefined MBTI Score -->MBTI Nodes
  optional FunctionParams function_param = 2;
  optional NodeConnector node_structure = 3;
}

message FileTree{
  int32 tree_type = 1;// Currently Not In Use || refers to FunctionIndexGen.yaml, id of blueprint base framework
  NodeData root_node = 2;// root node deserialize with APMFactory Node Data
  bool is_default = 3;// Currently Not In Use || Is using current tree as default tree

}
message apmFile{
  repeated FileTree trees = 1;//root node is the ending node of a single service
  int32 usr_id = 2; // Currently Not In Use
  int32 character_id = 3; // Currently Not In Use
}

//into raw data slot in NodeData
message FunctionParams{
  //General Main ServiceFunction
  optional string function_prompt = 1;
  //SubService Function
  optional bytes input_data_obj = 2;
  //Text MainService Function
  optional string input_text = 3;
  // system prompt for LLM
  optional string system_prompt = 4;
}

